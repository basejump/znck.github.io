{"id":"2017-07-12-vue-v2-4","slug":"vue-v2-4","highlightedLanguages":["vue","js"],"source":"---\ndate: 2017-07-12\ndescription: What's new in Vue v2.4\ntags:\n  - vue\ncollection: New in Vue\n---\n# Vue v2.4 is released\n\nVue v2.4 aka **Kill la Kill** is released and available with improved SSR support, async components and lots of other shiny features.\n\n## New Stuff\n\n### Async component support\n\nAsync components can be used anywhere and are no longer limited to route level. This would get you better code-splitting.\n\n### Improved SSR\n\nSSR now supports rendering async components used anywhere and the client also supports async components during the hydration phase. This means async components too work during SSR.\n\n`vue-template-compiler` now has two new SSR-specific compile methods that generates SSR-specific render function code by optimizing parts of the template into string concatenation. This improves raw SSR render performance by 2~8x depending on how much of the template can be optimized. Note this will have a much smaller impact on requests per second for a real app because raw render performance is only a small portion of the overall time spent in a request.\n\nThis is enabled by default in vue-loader@>=12 and can be disabled using the optimizeSSR option.\n\n### Wrapper components\n\nA new component option, `inheritAttrs`, which would turn off the default behavior where parent scope non-prop bindings are automatically inherited on component root as attributes.\n\nNew instance properties: `$attrs` & `$listeners`. `$attrs` contains the parent-scope attribute bindings that were not recognized as props, and `$listeners` contains the `v-on` listeners registered in the parent scope (without the `.native` modifier). These are essentially aliases of `$vnode.data.attrs` and `$vnode.data.on`, but are reactive.\n\n`v-on` would support object syntax with no arguments. This pairs well with the new `$listeners` instance property when creating higher-order components. Note this syntax does not support modifiers.\n\nCombining these allows us to simplify a component like [this](https://github.com/almino/semantic-ui-vue2/blob/master/src/elements/Input.vue) down into this:\n\n``` vue\n<div>\n  <input v-bind=\"$attributes\" v-on=\"$listeners\" />\n</div>\n```\n\n### Other features\n\nES module default export is auto-resolved when resolving async components. This enables keeping using the simpler `const Foo = () => import('./Foo.vue')` syntax when declaring async components with the changes introduced in [vue-loader@13.0.0](https://znck.me/blog/2017-06-28-vue-loader-v13-vue-router-v2-7).\n\nInclude/exclude props on `keep-alive` now supports array syntax too.\n\n`$watch` method now support same syntax as `watch` option.\n\n``` js\n{ handler: () => {}, deep: true }\n```\n\nNew typescript definations for `vue-server-renderer`.\n\n`Vue.config.errorHandler` would capture errors in custom event handlers too. Now you can provide custom warnging handler too, `Vue.config.warnHandler`. Warnings are throw only in development environment.\n\nNew `comments` option would allow to preserve comments in template.\n\n## Bug Fixes\n\nNow classes (`enterToClass`, `leaveToClass`) are checked for existence before adding them.\n\nEnsure cleanup in `watcher.get`, this would resolve memory leak issue when using `computed` in SSR.\n\nFixes for issues arround setting/deleting numeric/string keys on reactive arrays. Vue.set/Vue.delete API would support string/number type of array index.\n\nMultiple merged vnode hooks invocation is fixed, this would ensure consistent behaviour with `inserted` hook on directives.\n\n`v-model` would work with `is` attribute.\n\nPlugins can be used with multiple versions of Vue in same project.\n\nThe first newline following `pre` and `textarea` tag would be ignored.\n\nTransition group would work with dynamic name. `out-in` transitions for async components would work as expected.\n\nConsistent behavior during IME composition for other text-like input types.\n\n`v-bind` object would not override props on scopedSlots.\n\nFixes around memory leak issues by preventing data.pendingInsert from keeping reference to removed nodes.\n\nReductions in memory usage by avoiding keeping reference to old vdom tree after patch.\n\nReserved attributes (is, ref, ...) in v-bind object syntax would be ignored.\n","rendered":"<h1>Vue v2.4 is released</h1>\n<p>Vue v2.4 aka <strong>Kill la Kill</strong> is released and available with improved SSR support, async components and lots of other shiny features.</p>\n<h2>New Stuff</h2>\n<h3>Async component support</h3>\n<p>Async components can be used anywhere and are no longer limited to route level. This would get you better code-splitting.</p>\n<h3>Improved SSR</h3>\n<p>SSR now supports rendering async components used anywhere and the client also supports async components during the hydration phase. This means async components too work during SSR.</p>\n<p><code>vue-template-compiler</code> now has two new SSR-specific compile methods that generates SSR-specific render function code by optimizing parts of the template into string concatenation. This improves raw SSR render performance by 2~8x depending on how much of the template can be optimized. Note this will have a much smaller impact on requests per second for a real app because raw render performance is only a small portion of the overall time spent in a request.</p>\n<p>This is enabled by default in vue-loader@&gt;=12 and can be disabled using the optimizeSSR option.</p>\n<h3>Wrapper components</h3>\n<p>A new component option, <code>inheritAttrs</code>, which would turn off the default behavior where parent scope non-prop bindings are automatically inherited on component root as attributes.</p>\n<p>New instance properties: <code>$attrs</code> &amp; <code>$listeners</code>. <code>$attrs</code> contains the parent-scope attribute bindings that were not recognized as props, and <code>$listeners</code> contains the <code>v-on</code> listeners registered in the parent scope (without the <code>.native</code> modifier). These are essentially aliases of <code>$vnode.data.attrs</code> and <code>$vnode.data.on</code>, but are reactive.</p>\n<p><code>v-on</code> would support object syntax with no arguments. This pairs well with the new <code>$listeners</code> instance property when creating higher-order components. Note this syntax does not support modifiers.</p>\n<p>Combining these allows us to simplify a component like <a href=\"https://github.com/almino/semantic-ui-vue2/blob/master/src/elements/Input.vue\">this</a> down into this:</p>\n<pre><code class=\"language-vue\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>$attributes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-on</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>$listeners<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3>Other features</h3>\n<p>ES module default export is auto-resolved when resolving async components. This enables keeping using the simpler <code>const Foo = () =&gt; import('./Foo.vue')</code> syntax when declaring async components with the changes introduced in <a href=\"https://znck.me/blog/2017-06-28-vue-loader-v13-vue-router-v2-7\">vue-loader@13.0.0</a>.</p>\n<p>Include/exclude props on <code>keep-alive</code> now supports array syntax too.</p>\n<p><code>$watch</code> method now support same syntax as <code>watch</code> option.</p>\n<pre><code class=\"language-js\"><span class=\"token punctuation\">{</span> handler<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>New typescript definations for <code>vue-server-renderer</code>.</p>\n<p><code>Vue.config.errorHandler</code> would capture errors in custom event handlers too. Now you can provide custom warnging handler too, <code>Vue.config.warnHandler</code>. Warnings are throw only in development environment.</p>\n<p>New <code>comments</code> option would allow to preserve comments in template.</p>\n<h2>Bug Fixes</h2>\n<p>Now classes (<code>enterToClass</code>, <code>leaveToClass</code>) are checked for existence before adding them.</p>\n<p>Ensure cleanup in <code>watcher.get</code>, this would resolve memory leak issue when using <code>computed</code> in SSR.</p>\n<p>Fixes for issues arround setting/deleting numeric/string keys on reactive arrays. Vue.set/Vue.delete API would support string/number type of array index.</p>\n<p>Multiple merged vnode hooks invocation is fixed, this would ensure consistent behaviour with <code>inserted</code> hook on directives.</p>\n<p><code>v-model</code> would work with <code>is</code> attribute.</p>\n<p>Plugins can be used with multiple versions of Vue in same project.</p>\n<p>The first newline following <code>pre</code> and <code>textarea</code> tag would be ignored.</p>\n<p>Transition group would work with dynamic name. <code>out-in</code> transitions for async components would work as expected.</p>\n<p>Consistent behavior during IME composition for other text-like input types.</p>\n<p><code>v-bind</code> object would not override props on scopedSlots.</p>\n<p>Fixes around memory leak issues by preventing data.pendingInsert from keeping reference to removed nodes.</p>\n<p>Reductions in memory usage by avoiding keeping reference to old vdom tree after patch.</p>\n<p>Reserved attributes (is, ref, ...) in v-bind object syntax would be ignored.</p>\n","attributes":{"date":"2017-07-12T00:00:00.000Z","description":"What's new in Vue v2.4","tags":[{"id":"vue","name":"vue"}],"collection":{"id":"new-in-vue","name":"New in Vue"},"title":"Vue v2.4 is released","updated_at":"2017-07-14T00:50:12.000Z"},"title":"Vue v2.4 is released","description":"What's new in Vue v2.4","keywords":["vue"],"published_at":"2017-07-12T00:00:00.000Z","updated_at":"2017-07-14T00:50:12.000Z","year":2017,"month":7,"day":13,"prev":{"id":"2017-06-28-vue-loader-v13-vue-router-v2-7","title":"Vue Loader v13.0.0 and Router v2.7.0 are Released","description":"What's new in vue-loader v13.0.0 and vue-router v2.7.0","published_at":"2017-06-28T00:00:00.000Z"}}