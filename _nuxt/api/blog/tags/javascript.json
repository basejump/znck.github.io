{
  "id": "javascript",
  "name": "javascript",
  "data": [
    {
      "id": "2017-03-10-provide-inject-in-vue-2-2",
      "filename": "blog/2017-03-10-provide-inject-in-vue-2-2.md",
      "attributes": {
        "date": "2017-03-10T00:00:00.000Z",
        "description": "Exploring provide & inject pair in Vue 2.2",
        "medium": "https://medium.com/@znck/provide-inject-in-vue-2-2-b6473a7f7816",
        "tags": [
          "vue",
          "javascript"
        ],
        "collection": "Vue",
        "title": "Provide/Inject in Vue 2.2",
        "updated_at": "2017-06-23T05:46:29.000Z",
        "collections": [
          "Vue"
        ]
      },
      "rendered": "<h1>Provide/Inject in Vue 2.2</h1>\n<p>The <strong>Initial D</strong> release of Vue have some amazing new features, including improved server side rendering, <code>v-model</code> customisations, better error handling, <code>provide</code> &amp; <code>inject</code> pair and many other small improvements.</p>\n<p>The <code>provide</code> and <code>inject</code> pair offers data flow deep in descendant chain. Ancestor components can serve as dependency injector for all its descendants, regardless how deep the component hierarchy is. The feature is advertised for advance plugin/component usages.</p>\n<h2>Workflow</h2>\n<p>It works in two parts — One component would <code>provide</code> data and other would use it (<code>inject</code>).</p>\n<blockquote>\n<p>The <code>provide</code> option should be an <code>object</code> or a <code>function</code> that returns an <code>object</code>. This <code>object</code> contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this <code>object</code>, but only in environments that natively support <code>Symbol</code> and <code>Reflect.ownKeys</code>.</p>\n</blockquote>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  provide<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>The <code>inject</code> options should be either an <code>Array</code> of strings or an <code>object</code> where the keys stand for the local binding name, and the value being the key (<code>string</code> or <code>Symbol</code>) to search for in available injections.</p>\n</blockquote>\n<pre><code class=\"language-js\">  <span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    inject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<script async src=\"//jsfiddle.net/znck/4v95vfh3/embed/\"></script>\n<p>The <code>provide</code>/<code>inject</code> binding are <strong>NOT</strong> reactive. But if observed objects are provided, they do remain reactive.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  provide <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'baz'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<script async src=\"//jsfiddle.net/znck/fdzwtz43/embed/\"></script>\n<p>Injections are available in <code>props</code> and <code>data</code>. So, you could set <code>prop</code> defaults to injected data or you can use injections as initial <code>data</code>.</p>\n<h2>Performance</h2>\n<p>Both <code>provide</code> and <code>inject</code> are one time actions performed at component initialisation. So, there won’t be any apparent performance degradation.</p>\n<p><code>provide</code> action is constant time.</p>\n<p>For each injected property, <code>inject</code> would traverse the parent chain until first provider is reached.</p>\n<h2>Conclusion</h2>\n<p>With <code>provide</code>/<code>inject</code>, you can provide data to distant descendent and that allows to create amazing functionalities. A whole new type of Vue plugins are about to appear.</p>\n<p>For example: A parent component can inject validation messages in input components.</p>\n<script async src=\"//jsfiddle.net/znck/go4yepc1/embed/\"></script>\n",
      "source": "---\ndate: 2017-03-10\ndescription: Exploring provide & inject pair in Vue 2.2\nmedium: https://medium.com/@znck/provide-inject-in-vue-2-2-b6473a7f7816\ntags:\n  - vue\n  - javascript\ncollection: Vue\n---\n# Provide/Inject in Vue 2.2\n\nThe **Initial D** release of Vue have some amazing new features, including improved server side rendering, `v-model` customisations, better error handling, `provide` & `inject` pair and many other small improvements.\n\nThe `provide` and `inject` pair offers data flow deep in descendant chain. Ancestor components can serve as dependency injector for all its descendants, regardless how deep the component hierarchy is. The feature is advertised for advance plugin/component usages. \n\n## Workflow\n\nIt works in two parts — One component would `provide` data and other would use it (`inject`).\n> The `provide` option should be an `object` or a `function` that returns an `object`. This `object` contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this `object`, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\n  ``` js\n  const Provider = {\n    provide: {\n      foo: 'bar'\n    }\n  }\n  ```\n\n> The `inject` options should be either an `Array` of strings or an `object` where the keys stand for the local binding name, and the value being the key (`string` or `Symbol`) to search for in available injections.\n  ``` js\n    const Child = {\n      inject: ['foo']\n    }\n  ```\n\n<script async src=\"//jsfiddle.net/znck/4v95vfh3/embed/\"></script>\n\nThe `provide`/`inject` binding are **NOT** reactive. But if observed objects are provided, they do remain reactive.\n  ``` js\n  const Provider = {\n    provide () {\n      const foo = {}\n\n      Object.defineProperty(foo, 'bar', {\n          enumerable: true,\n          get: () => this.bar,\n      })\n\n      return { foo }\n    },\n\n    data: () => ({ bar: 'baz' })\n  }\n  ```\n\n<script async src=\"//jsfiddle.net/znck/fdzwtz43/embed/\"></script>\n\nInjections are available in `props` and `data`. So, you could set `prop` defaults to injected data or you can use injections as initial `data`.\n\n## Performance\n\nBoth `provide` and `inject` are one time actions performed at component initialisation. So, there won’t be any apparent performance degradation.\n\n`provide` action is constant time.\n\nFor each injected property, `inject` would traverse the parent chain until first provider is reached.\n\n## Conclusion\n\nWith `provide`/`inject`, you can provide data to distant descendent and that allows to create amazing functionalities. A whole new type of Vue plugins are about to appear.\n\nFor example: A parent component can inject validation messages in input components.\n\n<script async src=\"//jsfiddle.net/znck/go4yepc1/embed/\"></script>\n",
      "next": {
        "id": "2017-03-05-fiddle-with-vue-js",
        "attributes": {
          "date": "2017-03-05T00:00:00.000Z",
          "description": "A not so comprehensive guide on creating issue reproduction for Vue.js",
          "medium": "https://medium.com/@znck/fiddle-with-vue-js-dfd3e2924992",
          "tags": [
            "vue",
            "javascript"
          ],
          "collection": "Vue",
          "title": "Fiddle with Vue.js",
          "updated_at": "2017-06-20T14:20:48.000Z",
          "collections": [
            "Vue"
          ]
        }
      }
    },
    {
      "id": "2017-03-05-fiddle-with-vue-js",
      "filename": "blog/2017-03-05-fiddle-with-vue.js.md",
      "attributes": {
        "date": "2017-03-05T00:00:00.000Z",
        "description": "A not so comprehensive guide on creating issue reproduction for Vue.js",
        "medium": "https://medium.com/@znck/fiddle-with-vue-js-dfd3e2924992",
        "tags": [
          "vue",
          "javascript"
        ],
        "collection": "Vue",
        "title": "Fiddle with Vue.js",
        "updated_at": "2017-06-20T14:20:48.000Z",
        "collections": [
          "Vue"
        ]
      },
      "rendered": "<h1>Fiddle with Vue.js</h1>\n<p>If you’ve created an issue on Vue.js repository for the first time then there is high probability that you skipped reading the contribution guidelines. By doing so you’ve created an issue that does not tell maintainers a thing and helps nobody.<br>\nNext, you would be hit with a template response and your issue would be labelled need repro.</p>\n<h2>What is need repro?</h2>\n<p>Issues labelled need reproduction or need repro are ignored by maintainers. Maintainers want to fix every issue but they can’t, until they could recreate same issue and find out what is causing it. A copy &amp; paste of console log or “Your shit is broken. Fix it!”, is not helping these guys.</p>\n<h2>Why should you create a repro?</h2>\n<blockquote>\n<p>I work on a lot of different open source projects. I really do like building software that makes other people’s lives easier, but it’s crazy time-consuming. One of the most time-consuming parts is responding to issues. A lot of OSS maintainers will bend over backwards to try and understand your specific problem and diagnose it, to the point of setting up new test projects, fussing around with different Node versions, reading the documentation for build tools that we don’t use, debugging problems in third party dependencies that appear to be involved in the problem… and so on. I’ve personally spent hundreds of hours of my free time doing these sorts of things to try and help people out, because I want to be a responsible maintainer and I want the users of my software to be productive and happy.<br>\nBut it’s not sustainable.<br>\nSo I’m instituting a new rule: if you report an issue, you must have a minimal reproduction that demonstrates the problem. You might think you’ve already provided a repro — in fact you might have spent a lot of time figuring out where you think the problem lies, and writing instructions for maintainers to follow, and we’re grateful for that. But if you got sent here, it’s because it’s not enough.</p>\n</blockquote>\n<p>This is an extract from <a href=\"https://github.com/Rich-Harris\">Rich Harris</a>’ gist on “<a href=\"https://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\">Please include a repro</a>”.</p>\n<h2>How to create a repro?</h2>\n<p>To maintainers, it seems trivial to create a repro but most people struggle isolating the issue and recreating it on jsfiddle (or others), some don’t want to share details of their project and some are just lazy.<br>\nYou can use jsfiddle/jsbin to reproduce your issue. If you need a build tool then scaffold a repository using <code>vue build</code> tool. Following is a step by step process I follow when creating an issue:</p>\n<h3>To create a repro on jsfiddle</h3>\n<ul>\n<li><strong>Start with a template:</strong> You should use a template, it saves time and better than an empty screen to get started. Use template (<a href=\"https://jsfiddle.net/39epgLj0/\">https://jsfiddle.net/39epgLj0/</a>) from Vue’s contribution guidelines.</li>\n<li><strong>Write minimal code:</strong> If your fiddle has few lines it is more likely to be solved faster, as it is easier to comprehend small code and issue is already isolated all we have to do is find the cause. You can start pasting the code from your project and strip off all unnecessary stuff and then replace the data with fakes.</li>\n<li><strong>Explicitly define dependencies:</strong> Jsfiddle allows you to add external dependencies but rather you should add a script tag with <a href=\"https://unpkg.com/\">https://unpkg.com/</a> link.</li>\n<li><strong>Follow coding style:</strong> If every one follows same code style then cognitive friction of reading others' code is reduced. <a href=\"https://github.com/pablohpsilva\">Pablo Henrique</a> has prepared an <a href=\"https://pablohpsilva.github.io/vuejs-component-style-guide/\">extensive code style guide</a>, you should follow that.\n<blockquote>\n<p>I am also trying to formulate interoperability standards that would cover code style and component API. The project have just started. You can keep an eye on progress (star &amp; watch <a href=\"https://github.com/znck/vue-interop\">https://github.com/znck/vue-interop</a>).</p>\n</blockquote>\n</li>\n<li><strong>Add comments:</strong> Describe your intent in code. Comments guide readers to understand your code better and be on same page as you’re.<br>\nI’ve created an example fiddle demonstration.</li>\n</ul>\n<script async src=\"//jsfiddle.net/znck/hm2sfh4r/embed/\"></script>\n<h3>To create a repro repository</h3>\n<ul>\n<li><strong>Use Vue build tool:</strong> You can create zero configuration development setup using vue build. Go through documentation (<a href=\"https://github.com/vuejs/vue-cli/blob/master/docs/build.md\">https://github.com/vuejs/vue-cli/blob/master/docs/build.md</a>) to know more.</li>\n<li><strong>Include <a href=\"http://README.md\">README.md</a>:</strong> Describe your issue briefly and provide steps to produce the issue. Following is an example <a href=\"http://README.md\">README.md</a><pre><code class=\"language-markdown\"># Issue: rollup build fails when shared cache\nWhen using the rollup option `separateCaches` to speed up successive builds for `gulp.watch`, \nI get an error on each rebuild. On the first run it builds successfully because `separateCaches` is `undefined`.\n\n## Steps to reproduce\n- Run `gulp watch`\n- Update something in a .js file\n\n> Related issues: #55, #97\n</code></pre>\n</li>\n<li><strong>Push to Github:</strong> Create a github repository and push the repro code.</li>\n</ul>\n<h3>To create an issue</h3>\n<p>Always follow contribution guidelines. I know it’s really difficult to read a large article when you’re stuck with an issue. That is why Vue.js team is experimenting with a tool to help users to create issues. It is not in production yet but you can use the prototype (<a href=\"http://vue-issue.surge.sh/\">http://vue-issue.surge.sh/</a>).</p>\n",
      "source": "---\ndate: 2017-03-05\ndescription: A not so comprehensive guide on creating issue reproduction for Vue.js\nmedium: https://medium.com/@znck/fiddle-with-vue-js-dfd3e2924992\ntags:\n  - vue\n  - javascript\ncollection: Vue\n---\n# Fiddle with Vue.js\n\nIf you’ve created an issue on Vue.js repository for the first time then there is high probability that you skipped reading the contribution guidelines. By doing so you’ve created an issue that does not tell maintainers a thing and helps nobody.\nNext, you would be hit with a template response and your issue would be labelled need repro.\n\n## What is need repro?\n\nIssues labelled need reproduction or need repro are ignored by maintainers. Maintainers want to fix every issue but they can’t, until they could recreate same issue and find out what is causing it. A copy & paste of console log or “Your shit is broken. Fix it!”, is not helping these guys.\n\n## Why should you create a repro?\n\n> I work on a lot of different open source projects. I really do like building software that makes other people’s lives easier, but it’s crazy time-consuming. One of the most time-consuming parts is responding to issues. A lot of OSS maintainers will bend over backwards to try and understand your specific problem and diagnose it, to the point of setting up new test projects, fussing around with different Node versions, reading the documentation for build tools that we don’t use, debugging problems in third party dependencies that appear to be involved in the problem… and so on. I’ve personally spent hundreds of hours of my free time doing these sorts of things to try and help people out, because I want to be a responsible maintainer and I want the users of my software to be productive and happy.\n> But it’s not sustainable.\n> So I’m instituting a new rule: if you report an issue, you must have a minimal reproduction that demonstrates the problem. You might think you’ve already provided a repro — in fact you might have spent a lot of time figuring out where you think the problem lies, and writing instructions for maintainers to follow, and we’re grateful for that. But if you got sent here, it’s because it’s not enough.\n\nThis is an extract from [Rich Harris](https://github.com/Rich-Harris)’ gist on “[Please include a repro](https://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff)”.\n\n## How to create a repro?\n\nTo maintainers, it seems trivial to create a repro but most people struggle isolating the issue and recreating it on jsfiddle (or others), some don’t want to share details of their project and some are just lazy.\nYou can use jsfiddle/jsbin to reproduce your issue. If you need a build tool then scaffold a repository using `vue build` tool. Following is a step by step process I follow when creating an issue:\n\n### To create a repro on jsfiddle\n\n- **Start with a template:** You should use a template, it saves time and better than an empty screen to get started. Use template ([https://jsfiddle.net/39epgLj0/](https://jsfiddle.net/39epgLj0/)) from Vue’s contribution guidelines.\n- **Write minimal code:** If your fiddle has few lines it is more likely to be solved faster, as it is easier to comprehend small code and issue is already isolated all we have to do is find the cause. You can start pasting the code from your project and strip off all unnecessary stuff and then replace the data with fakes.\n- **Explicitly define dependencies:** Jsfiddle allows you to add external dependencies but rather you should add a script tag with [https://unpkg.com/](https://unpkg.com/) link.\n- **Follow coding style:** If every one follows same code style then cognitive friction of reading others' code is reduced. [Pablo Henrique](https://github.com/pablohpsilva) has prepared an [extensive code style guide](https://pablohpsilva.github.io/vuejs-component-style-guide/), you should follow that.\n  > I am also trying to formulate interoperability standards that would cover code style and component API. The project have just started. You can keep an eye on progress (star & watch [https://github.com/znck/vue-interop](https://github.com/znck/vue-interop)).\n- **Add comments:** Describe your intent in code. Comments guide readers to understand your code better and be on same page as you’re.\n  I’ve created an example fiddle demonstration.\n\n<script async src=\"//jsfiddle.net/znck/hm2sfh4r/embed/\"></script>\n\n### To create a repro repository\n\n- **Use Vue build tool:** You can create zero configuration development setup using vue build. Go through documentation ([https://github.com/vuejs/vue-cli/blob/master/docs/build.md](https://github.com/vuejs/vue-cli/blob/master/docs/build.md)) to know more.\n- **Include README.md:** Describe your issue briefly and provide steps to produce the issue. Following is an example README.md\n  ```markdown\n  # Issue: rollup build fails when shared cache\n  When using the rollup option `separateCaches` to speed up successive builds for `gulp.watch`, \n  I get an error on each rebuild. On the first run it builds successfully because `separateCaches` is `undefined`.\n\n  ## Steps to reproduce\n  - Run `gulp watch`\n  - Update something in a .js file\n\n  > Related issues: #55, #97\n  ```\n- **Push to Github:** Create a github repository and push the repro code.\n\n### To create an issue\n\nAlways follow contribution guidelines. I know it’s really difficult to read a large article when you’re stuck with an issue. That is why Vue.js team is experimenting with a tool to help users to create issues. It is not in production yet but you can use the prototype ([http://vue-issue.surge.sh/](http://vue-issue.surge.sh/)).\n\n"
    },
    {
      "id": "2017-03-03-first-day-in-vue-js",
      "filename": "blog/2017-03-03-first-day-in-vue-js.md",
      "attributes": {
        "date": "2017-03-03T00:00:00.000Z",
        "description": "A memory log of first day in Vue.js by Rahul Kadyan (@znck).",
        "medium": "https://medium.com/@znck/first-day-in-vue-js-399c0ae19e41",
        "tags": [
          "vue",
          "experience",
          "javascript"
        ],
        "collection": "Vue",
        "title": "First Day in Vue.js",
        "updated_at": "2017-06-20T14:20:41.000Z",
        "collections": [
          "Vue"
        ]
      },
      "rendered": "<h1>First Day in Vue.js</h1>\n<p>Back in college, junior year, we were exploring our entrepreneurial skills. I started a product development startup with couple of friends. We’re supposed to build iOS applications but some how we ended building websites.</p>\n<p>In the short run of our venture we served variety of clients. And there was one providing on demand makeup &amp; haircut services. The product was ready in 40–50 days but one page was not ready for production.</p>\n<h2>The Page</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ffIaYNHeMMODesGt1NO-tw.png\" alt=\"\" class=\"image-wide\"></p>\n<p>It had services offered by the client divided into categories and subcategories. User could add multiple instances of same service. So, I hacked up some logic with jQuery and selectors. All cool! ready for production.</p>\n<p>But next they added a summery view of selected services. And guess what! modifying services in the summery view should update in original listing. Somehow we did it but it created a mess of events, callbacks and selectors that could fry up brains of best developers. Something was needed to be done at least for sake of next developer who would fight in with my dirty code.</p>\n<p>Next, I started looking for MVVM libraries and apparently to us Angular was the most popular one. Understanding all that ng-* stuff was way too complex and infeasible to implement in just one page. Alternative? Yep a week long hunt for alternatives.</p>\n<p>Clicking through links on blogs &amp; StackOverflow some how reached to Vue.js repository. With a scroll through the docs, I was writing Vue components. Best part was I didn’t have to change anything, just added Vue to one page without any change in app structure. In couple of hours, it was ready. There were no unexpected bugs. Code was clean &amp; understandable. And it took me couple of hours to implement everything (if you exclude time wasted in looking for Angular alternatives). Beautiful! isn’t it?</p>\n<h2>Thank you Angular!</h2>\n<p>If Angular wasn’t that crapy &amp; rigid back then I couldn’t have found Vue. The time wasted in looking for Angular alternatives is the best wasted time of my life and it was Angular that made me love Vue.</p>\n<p>Thanks a lot! Angular.</p>\n<h2>And beyond…</h2>\n<p>Vue has came a long way since then I’m glad I’m part of it’s journey as a core team member.</p>\n",
      "source": "---\ndate: 2017-03-03\ndescription: A memory log of first day in Vue.js by Rahul Kadyan (@znck).\nmedium: https://medium.com/@znck/first-day-in-vue-js-399c0ae19e41\ntags:\n  - vue\n  - experience\n  - javascript\ncollection: Vue\n---\n# First Day in Vue.js\n\nBack in college, junior year, we were exploring our entrepreneurial skills. I started a product development startup with couple of friends. We’re supposed to build iOS applications but some how we ended building websites.\n\nIn the short run of our venture we served variety of clients. And there was one providing on demand makeup & haircut services. The product was ready in 40–50 days but one page was not ready for production.\n\n## The Page\n\n![](https://cdn-images-1.medium.com/max/1000/1*ffIaYNHeMMODesGt1NO-tw.png){.image-wide}\n\nIt had services offered by the client divided into categories and subcategories. User could add multiple instances of same service. So, I hacked up some logic with jQuery and selectors. All cool! ready for production.\n\nBut next they added a summery view of selected services. And guess what! modifying services in the summery view should update in original listing. Somehow we did it but it created a mess of events, callbacks and selectors that could fry up brains of best developers. Something was needed to be done at least for sake of next developer who would fight in with my dirty code.\n\nNext, I started looking for MVVM libraries and apparently to us Angular was the most popular one. Understanding all that ng-* stuff was way too complex and infeasible to implement in just one page. Alternative? Yep a week long hunt for alternatives.\n\nClicking through links on blogs & StackOverflow some how reached to Vue.js repository. With a scroll through the docs, I was writing Vue components. Best part was I didn’t have to change anything, just added Vue to one page without any change in app structure. In couple of hours, it was ready. There were no unexpected bugs. Code was clean & understandable. And it took me couple of hours to implement everything (if you exclude time wasted in looking for Angular alternatives). Beautiful! isn’t it?\n\n## Thank you Angular!\nIf Angular wasn’t that crapy & rigid back then I couldn’t have found Vue. The time wasted in looking for Angular alternatives is the best wasted time of my life and it was Angular that made me love Vue.\n\nThanks a lot! Angular.\n\n## And beyond…\nVue has came a long way since then I’m glad I’m part of it’s journey as a core team member.\n\n"
    }
  ]
}